        Connection c = null;
        try {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:test.db");
        } catch (Exception e) {
            System.err.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(0);
        }
        System.out.println("Opened database successfully");

// _-----------------_________________----------------------___________________-------------        

        Statement stmt = null;
        try {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:test.db");
            System.out.println("Opened database successfully");

            stmt = c.createStatement();
            String sql = "CREATE TABLE COMPANY "
                    + "(ID INT PRIMARY KEY     NOT NULL,"
                    + " NAME           TEXT    NOT NULL, "
                    + " AGE            INT     NOT NULL, "
                    + " ADDRESS        CHAR(50), "
                    + " SALARY         REAL)";
            stmt.executeUpdate(sql);
            stmt.close();
            c.close();
        } catch (Exception e) {
            System.err.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(0);
        }
        System.out.println("Table created successfully");
 
// _-----------------_________________----------------------___________________-------------
        
        try {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:test.db");
            c.setAutoCommit(false);
            System.out.println("Opened database successfully");

            stmt = c.createStatement();
            String sql = "INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) "
                    + "VALUES (1, 'Paul', 32, 'California', 20000.00 );";
            stmt.executeUpdate(sql);

            sql = "INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) "
                    + "VALUES (2, 'Allen', 25, 'Texas', 15000.00 );";
            stmt.executeUpdate(sql);

            sql = "INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) "
                    + "VALUES (3, 'Teddy', 23, 'Norway', 20000.00 );";
            stmt.executeUpdate(sql);

            sql = "INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) "
                    + "VALUES (4, 'Mark', 25, 'Rich-Mond ', 65000.00 );";
            stmt.executeUpdate(sql);

            stmt.close();
            c.commit();
            c.close();
        } catch (Exception e) {
            System.err.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(0);
        }
        System.out.println("Records created successfully");
        
        
// _-----------------_________________----------------------___________________-------------        
        try {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:test.db");
            c.setAutoCommit(false);
            System.out.println("Opened database successfully");

            stmt = c.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM COMPANY;");
            while (rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("name");
                int age = rs.getInt("age");
                String address = rs.getString("address");
                float salary = rs.getFloat("salary");
                System.out.println("ID = " + id);
                System.out.println("NAME = " + name);
                System.out.println("AGE = " + age);
                System.out.println("ADDRESS = " + address);
                System.out.println("SALARY = " + salary);
                System.out.println();
            }
            rs.close();
            stmt.close();
            c.close();
        } catch (Exception e) {
            System.err.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(0);
        }
        System.out.println("Operation done successfully");



Connection conn = new Connection(); // whatever it might be
String psString = "UPDATE myTable SET myText = 'First Update'";
String psStringWithParms = "UPDATE myTable SET myText = ?";

// prepare & execute the psString 
PreparedStatement ps = conn.prepareStatement(psString);
ps.executeUpdate();

// now we will overwrite this using the parameterised psString
PreparedStatement psParms = conn.prepareStatement(psStringWithParms);
psParms.setString(1,"Revised update");
psParms.executeUpdate();


.open C:/Users/Kousa/Documents/NetBeansProjects/TIMOTEI/timotei.sqlite3

+ " VALUES (?, ?, ?, ?, ?, ?, ?, 'false');";


CREATE TABLE Smartposts(
	Name VARCHAR(50) NOT NULL PRIMARY KEY,
	Openhours VARCHAR(150) NOT NULL,
	Street VARCHAR(50) NOT NULL,
	Postcode VARCHAR(5) NOT NULL,
	City VARCHAR(20) NOT NULL,
	Lat VARCHAR(20) NOT NULL,
	Lng VARCHAR(20) NOT NULL,
	haspacket boolean
	
--	CHECK (Postcode LIKE '[0-9][0-9][0-9][0-9][0-9]')
);


//        new SimpleDateFormat("dd.MM.yyyy HH:mm:ss").format(new Timestamp());

JavaScript-rajapinta
    document.goToLocation(string, string, string)
        -Metodi, jonka avulla voidaan piirtää merkki kartalle lähettämällä tietoa pääohjelmasta. 
         Metodi käsittelee annetun osoitteen ja piirtää merkin löydettyyn kohtaan ja 
         lisää muut tiedot infoikkunaan (klikkaa piirrettyä merkkiä ja infoikkuna aukeaa).
        -3 parametria:
            -Osoite merkkijonona muodossa <katuosoite>, <postinumero> <postitoimipaikka> 
            -Smartpostin muut tiedot (postin toimipiste ja aukioloajat) merkkijonona
            -Piirrosmerkin väri merkkijonona

    document.createPath(arraylist, string, int)
        -Metodi, jonka avulla paketti voidaan lähettää kulkemaan kartalla antamalla sille taulukkona tietoa paketin alku- ja päätepisteistä. Reittiä voidaan erottaa muista määrittämällä sille omanlaisensa väri parametrina ja reitin piirtonopeus riippuu paketin siirtoluokasta.
        -3 parametria:
            -ArrayList (tai taulukko String-muodossa), joka pitää sisällään aloitus ja lopetuspisteet reitille muodossa [aloitus lat, aloitus lon, lopetus lat, lopetus lon]
            -Reitin väri merkkijonona
            -Paketin siirtoluokka kokonaislukua 1, 2 tai 3
        -Palauttaa matkan pituuden pisteiden välillä
    
    document.deletePaths()
        -Metodi, jonka avulla on mahdollista poistaa kaikki kartalle piirretyt reitit, mutta ei merkkejä. 
        -Ei ota parametreja


document.goToLocation('Toikansuontie 4, 53505 LAPPEENRANTA', 'Pakettiautomaatti, K-citymarket Lappeenranta ma-pe 8.00 - 21.00, la 8.00 - 18.00, su 12.00 - 18.00', 'BLUE')
document.goToLocation('Toikansuontie 4, 53505 LAPPEENRANTA', 'Kikkeliskoo', 'BLUE')


        // --------------
        // Paketin tallentaminen tietokantaan. 
        
//        PreparedStatement stmt = null;
//
//        try {
//
//            String sql = "INSERT INTO Paketit"
//                    + "VALUES (?, ?, ?);";
//
//            stmt = c.prepareStatement(sql);
//
//            stmt.setString(1, pID);
//            stmt.setString(2, oID);
//            stmt.setString(3, String.valueOf(iType));
//
//            stmt.executeUpdate(sql);
//
//            stmt.close();
//            c.commit();
//            c.close();
//        } catch (Exception e) {
//            System.err.println(e.getClass().getName() + ": " + e.getMessage());
//            System.exit(0);
//        }
//
//        System.out.println("Record into Package created successfully");

INSERT INTO Paketit (PacketID, AsiakasID, TuoteID) VALUES ('I24324', 'P666', '1' );